#include "keamodule.h"

using namespace isc::data;
using namespace isc::dhcp;
using namespace isc::hooks;

extern "C" {

typedef struct {
    const char *name;
    int value;
} KeaConstant;

#define constant(name) {#name, name}

static KeaConstant constants[] = {
    constant(BOOTREQUEST),
    constant(BOOTREPLY),

    {"NEXT_STEP_CONTINUE", CalloutHandle::NEXT_STEP_CONTINUE},
    {"NEXT_STEP_SKIP", CalloutHandle::NEXT_STEP_SKIP},
    {"NEXT_STEP_DROP", CalloutHandle::NEXT_STEP_DROP},
    {"NEXT_STEP_PARK", CalloutHandle::NEXT_STEP_PARK},

    {"STATE_DEFAULT", 0x0},
    {"STATE_DECLINED", 0x1},
    {"STATE_EXPIRED_RECLAIMED", 0x2},

    constant(DHO_PAD),
    constant(DHO_SUBNET_MASK),
    constant(DHO_TIME_OFFSET),
    constant(DHO_ROUTERS),
    constant(DHO_TIME_SERVERS),
    constant(DHO_NAME_SERVERS),
    constant(DHO_DOMAIN_NAME_SERVERS),
    constant(DHO_LOG_SERVERS),
    constant(DHO_COOKIE_SERVERS),
    constant(DHO_LPR_SERVERS),
    constant(DHO_IMPRESS_SERVERS),
    constant(DHO_RESOURCE_LOCATION_SERVERS),
    constant(DHO_HOST_NAME),
    constant(DHO_BOOT_SIZE),
    constant(DHO_MERIT_DUMP),
    constant(DHO_DOMAIN_NAME),
    constant(DHO_SWAP_SERVER),
    constant(DHO_ROOT_PATH),
    constant(DHO_EXTENSIONS_PATH),
    constant(DHO_IP_FORWARDING),
    constant(DHO_NON_LOCAL_SOURCE_ROUTING),
    constant(DHO_POLICY_FILTER),
    constant(DHO_MAX_DGRAM_REASSEMBLY),
    constant(DHO_DEFAULT_IP_TTL),
    constant(DHO_PATH_MTU_AGING_TIMEOUT),
    constant(DHO_PATH_MTU_PLATEAU_TABLE),
    constant(DHO_INTERFACE_MTU),
    constant(DHO_ALL_SUBNETS_LOCAL),
    constant(DHO_BROADCAST_ADDRESS),
    constant(DHO_PERFORM_MASK_DISCOVERY),
    constant(DHO_MASK_SUPPLIER),
    constant(DHO_ROUTER_DISCOVERY),
    constant(DHO_ROUTER_SOLICITATION_ADDRESS),
    constant(DHO_STATIC_ROUTES),
    constant(DHO_TRAILER_ENCAPSULATION),
    constant(DHO_ARP_CACHE_TIMEOUT),
    constant(DHO_IEEE802_3_ENCAPSULATION),
    constant(DHO_DEFAULT_TCP_TTL),
    constant(DHO_TCP_KEEPALIVE_INTERVAL),
    constant(DHO_TCP_KEEPALIVE_GARBAGE),
    constant(DHO_NIS_DOMAIN),
    constant(DHO_NIS_SERVERS),
    constant(DHO_NTP_SERVERS),
    constant(DHO_VENDOR_ENCAPSULATED_OPTIONS),
    constant(DHO_NETBIOS_NAME_SERVERS),
    constant(DHO_NETBIOS_DD_SERVER),
    constant(DHO_NETBIOS_NODE_TYPE),
    constant(DHO_NETBIOS_SCOPE),
    constant(DHO_FONT_SERVERS),
    constant(DHO_X_DISPLAY_MANAGER),
    constant(DHO_DHCP_REQUESTED_ADDRESS),
    constant(DHO_DHCP_LEASE_TIME),
    constant(DHO_DHCP_OPTION_OVERLOAD),
    constant(DHO_DHCP_MESSAGE_TYPE),
    constant(DHO_DHCP_SERVER_IDENTIFIER),
    constant(DHO_DHCP_PARAMETER_REQUEST_LIST),
    constant(DHO_DHCP_MESSAGE),
    constant(DHO_DHCP_MAX_MESSAGE_SIZE),
    constant(DHO_DHCP_RENEWAL_TIME),
    constant(DHO_DHCP_REBINDING_TIME),
    constant(DHO_VENDOR_CLASS_IDENTIFIER),
    constant(DHO_DHCP_CLIENT_IDENTIFIER),
    constant(DHO_NWIP_DOMAIN_NAME),
    constant(DHO_NWIP_SUBOPTIONS),
    constant(DHO_NISP_DOMAIN_NAME),
    constant(DHO_NISP_SERVER_ADDR),
    constant(DHO_TFTP_SERVER_NAME),
    constant(DHO_BOOT_FILE_NAME),
    constant(DHO_HOME_AGENT_ADDRS),
    constant(DHO_SMTP_SERVER),
    constant(DHO_POP3_SERVER),
    constant(DHO_NNTP_SERVER),
    constant(DHO_WWW_SERVER),
    constant(DHO_FINGER_SERVER),
    constant(DHO_IRC_SERVER),
    constant(DHO_STREETTALK_SERVER),
    constant(DHO_STDASERVER),
    constant(DHO_USER_CLASS),
    constant(DHO_DIRECTORY_AGENT),
    constant(DHO_SERVICE_SCOPE),
    constant(DHO_FQDN),
    constant(DHO_DHCP_AGENT_OPTIONS),
    constant(DHO_NDS_SERVERS),
    constant(DHO_NDS_TREE_NAME),
    constant(DHO_NDS_CONTEXT),
    constant(DHO_BCMCS_DOMAIN_NAME_LIST),
    constant(DHO_BCMCS_IPV4_ADDR),
    constant(DHO_AUTHENTICATE),
    constant(DHO_CLIENT_LAST_TRANSACTION_TIME),
    constant(DHO_ASSOCIATED_IP),
    constant(DHO_SYSTEM),
    constant(DHO_NDI),
    constant(DHO_UUID_GUID),
    constant(DHO_USER_AUTH),
    constant(DHO_GEOCONF_CIVIC),
    constant(DHO_PCODE),
    constant(DHO_TCODE),
    constant(DHO_NETINFO_ADDR),
    constant(DHO_NETINFO_TAG),
    constant(DHO_URL),
    constant(DHO_AUTO_CONFIG),
    constant(DHO_NAME_SERVICE_SEARCH),
    constant(DHO_SUBNET_SELECTION),
    constant(DHO_DOMAIN_SEARCH),
    constant(DHO_VIVCO_SUBOPTIONS),
    constant(DHO_VIVSO_SUBOPTIONS),
    constant(DHO_PANA_AGENT),
    constant(DHO_V4_LOST),
    constant(DHO_CAPWAP_AC_V4),
    constant(DHO_SIP_UA_CONF_SERVICE_DOMAINS),
    constant(DHO_RDNSS_SELECT),
    constant(DHO_V4_PORTPARAMS),
    constant(DHO_V4_CAPTIVE_PORTAL),
    constant(DHO_6RD),
    constant(DHO_V4_ACCESS_DOMAIN),
    constant(DHO_END),

    constant(DHCP_NOTYPE),
    constant(DHCPDISCOVER),
    constant(DHCPOFFER),
    constant(DHCPREQUEST),
    constant(DHCPDECLINE),
    constant(DHCPACK),
    constant(DHCPNAK),
    constant(DHCPRELEASE),
    constant(DHCPINFORM),
    constant(DHCPLEASEQUERY),
    constant(DHCPLEASEUNASSIGNED),
    constant(DHCPLEASEUNKNOWN),
    constant(DHCPLEASEACTIVE),
    constant(DHCPBULKLEASEQUERY),
    constant(DHCPLEASEQUERYDONE),
    constant(DHCPLEASEQUERYSTATUS),
    constant(DHCPTLS),
    constant(DHCP_TYPES_EOF),

    constant(DHCP4_CLIENT_PORT),
    constant(DHCP4_SERVER_PORT),
    constant(DHCP_OPTIONS_COOKIE),
    constant(RAI_OPTION_AGENT_CIRCUIT_ID),
    constant(RAI_OPTION_REMOTE_ID),
    constant(RAI_OPTION_DOCSIS_DEVICE_CLASS),
    constant(RAI_OPTION_LINK_SELECTION),
    constant(RAI_OPTION_SUBSCRIBER_ID),
    constant(RAI_OPTION_RADIUS),
    constant(RAI_OPTION_AUTH),
    constant(RAI_OPTION_VSI),
    constant(RAI_OPTION_RELAY_FLAGS),
    constant(RAI_OPTION_SERVER_ID_OVERRIDE),
    constant(RAI_OPTION_RELAY_ID),
    constant(RAI_OPTION_ACCESS_TECHNO_TYPE),
    constant(RAI_OPTION_ACCESS_NETWORK_NAME),
    constant(RAI_OPTION_ACCESS_POINT_NAME),
    constant(RAI_OPTION_ACCESS_POINT_BSSID),
    constant(RAI_OPTION_OPERATOR_ID),
    constant(RAI_OPTION_OPERATOR_REALM),
    constant(RAI_OPTION_RELAY_PORT),
    constant(RAI_OPTION_VIRTUAL_SUBNET_SELECT),
    constant(RAI_OPTION_VIRTUAL_SUBNET_SELECT_CTRL),

    constant(D6O_NAME_SERVERS),

    {"IDENT_HWADDR", Host::IdentifierType::IDENT_HWADDR},
    {"IDENT_DUID", Host::IdentifierType::IDENT_DUID},
    {"IDENT_CIRCUIT_ID", Host::IdentifierType::IDENT_CIRCUIT_ID},
    {"IDENT_CLIENT_ID", Host::IdentifierType::IDENT_CLIENT_ID},
    {"IDENT_FLEX", Host::IdentifierType::IDENT_FLEX},
};
#define num_constants (sizeof(constants) / sizeof(constants[0]))

int
Constants_define() {
    for (unsigned int i = 0; i < num_constants; i++) {
        if (PyModule_AddIntConstant(kea_module, constants[i].name, constants[i].value) < 0) {
            return (1);
        }
    }
    return (0);
}

}
